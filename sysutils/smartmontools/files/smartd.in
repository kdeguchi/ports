#!/bin/sh

# $FreeBSD: head/sysutils/smartmontools/files/smartd.in 513591 2019-10-02 17:46:41Z swills $
#
# PROVIDE: smartd
# REQUIRE: root ldconfig devfs syslogd mail
# KEYWORD: shutdown nojail
#
# Define these smartd_* variables in one of these files:
#	/etc/rc.conf
#	/etc/rc.conf.local
#	/etc/rc.conf.d/smartd
#
# DO NOT CHANGE THESE DEFAULT VALUES HERE

. /etc/rc.subr

name=smartd
rcvar=smartd_enable

load_rc_config smartd

: ${smartd_enable:="NO"}

required_files=${smartd_config:="%%PREFIX%%/etc/smartd.conf"}
pidfile=${smartd_pidfile:="/var/run/smartd.pid"}

command="%%PREFIX%%/sbin/smartd"
command_args="-c ${required_files} -p ${pidfile}"

extra_commands="reload report"
reload_cmd="smartd_reload"
report_cmd="smartd_report"

start_precmd=smartd_prestart
start_cmd="${name}_start"

smartd_prestart()
{
	case "${smartd_flags}" in
	-p*|*-p*)
	err 1 'smartd_flags includes the -p option, use smartd_pidfile instead'
		;;
	esac
}

smartd_reload()
{
	local status

	if ! status=`run_rc_command status 2>&1`; then
		echo $status
		return 1
	fi
	echo 'Reloading smartd.'
	kill -HUP $rc_pid
}

smartd_report()
{
	local status

	if ! status=`run_rc_command status 2>&1`; then
		echo $status
		return 1
	fi
	echo 'Checking SMART devices now.'
	kill -USR1 $rc_pid
}

smartd_start()
{
	local iter
	if ! checkyesno smartd_enable ; then
		return 0
	fi
	echo "Starting ${name}."
	( iter=0
	while ! pgrep -qf "/usr/libexec/getty "; do
		if [ ${iter} -eq 60 ]; then
			break
		fi
		sleep 1
		iter=$(expr ${iter} + 1)
	done
	sleep 1
	${command} ${rc_flags} ${command_args} ) &
}

run_rc_command "$1"
